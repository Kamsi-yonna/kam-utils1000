{"version":3,"sources":["../src/index.ts","../src/object.ts","../src/array.ts","../src/date.ts","../src/number.ts"],"sourcesContent":["// String manipulation functions\r\n\r\n// Capitalizes the first letter of a string\r\nexport function capitalize(str: string): string {\r\n  return str.charAt(0).toUpperCase() + str.slice(1);\r\n}\r\n\r\n// Converts a string to lowercase\r\nexport function lowerCase(str: string): string {\r\n  return str.toLowerCase();\r\n}\r\n\r\n// Converts a string to uppercase\r\nexport function upperCase(str: string): string {\r\n  return str.toUpperCase();\r\n}\r\n\r\n// Removes whitespace from the beginning and end of a string\r\nexport function trim(str: string): string {\r\n  return str.trim();\r\n}\r\n\r\n// Replaces all occurrences of a search string with a replace string\r\nexport function replaceAll(\r\n  str: string,\r\n  search: string,\r\n  replace: string\r\n): string {\r\n  return str.split(search).join(replace);\r\n}\r\n\r\nexport { keys, mergeObj, values } from './object';\r\nexport * from './array';\r\nexport * from './date';\r\nexport * from './number';\r\n","// Returns an array of keys in an object\r\nexport function keys(obj: object): string[] {\r\n  return Object.keys(obj);\r\n}\r\n\r\n// Returns an array of values in an object\r\nexport function values(obj: object): any[] {\r\n  return Object.values(obj);\r\n}\r\n\r\n// Merges two objects into a new object\r\nexport function mergeObj(obj1: object, obj2: object): object {\r\n  return { ...obj1, ...obj2 };\r\n}\r\n","// Divides an array into smaller arrays of a specified size\r\nexport function chunk(arr: any[], size: number): any[][] {\r\n  return arr.reduce((acc: any, val: any, i: number) => {\r\n    if (i % size === 0) {\r\n      acc.push([]);\r\n    }\r\n    acc[acc.length - 1].push(val);\r\n    return acc;\r\n  }, []);\r\n}\r\n\r\n// Returns a random item from an array\r\nexport function randomItem(arr: any[]): any {\r\n  return arr[Math.floor(Math.random() * arr.length)];\r\n}\r\n","import { format as formatDateFns } from \"date-fns\";\r\n\r\n// Formats a date object into a string based on a specified format\r\nexport function formatDate(date: Date, format: string): string {\r\n  const options: Intl.DateTimeFormatOptions = {};\r\n\r\n  switch (format) {\r\n    case \"long\":\r\n      options.weekday = \"long\"; // Include the day of the week\r\n      options.day = \"numeric\";\r\n      options.month = \"long\";\r\n      options.year = \"numeric\";\r\n      break;\r\n    case \"short\":\r\n      options.day = \"2-digit\";\r\n      options.month = \"2-digit\";\r\n      options.year = \"numeric\";\r\n      break;\r\n    case \"currentTime\":\r\n      return formatDateFns(new Date(), \"h:mm:ss a\");\r\n    case \"time\":\r\n      const [hours, minutes, seconds] = [\r\n        date.getHours(),\r\n        date.getMinutes(),\r\n        date.getSeconds(),\r\n      ];\r\n      return formatDateFns(\r\n        new Date(0, 0, 0, hours, minutes, seconds),\r\n        \"h:mm:ss a\"\r\n      );\r\n    case \"full\":\r\n      options.weekday = \"long\"; // Include the day of the week\r\n      options.day = \"numeric\";\r\n      options.month = \"long\";\r\n      options.year = \"numeric\";\r\n      options.hour = \"numeric\";\r\n      options.minute = \"numeric\";\r\n      break;\r\n    default:\r\n      throw new Error(`Unsupported format: ${format}`);\r\n  }\r\n\r\n  return new Intl.DateTimeFormat(\"en-US\", options).format(date);\r\n}\r\n\r\n// Calculates the number of days between two dates\r\nexport function daysBetween(date1: Date, date2: Date): number {\r\n  const timeDifference = date2.getTime() - date1.getTime();\r\n  return timeDifference / (1000 * 3600 * 24);\r\n}\r\n","// Round to a specified number of decimal places\r\nexport function roundNum(num: number, decimals: number): number {\r\n  return Math.round(num * Math.pow(10, decimals)) / Math.pow(10, decimals);\r\n}\r\n\r\n// Clamp a number between a minimum and maximum value\r\nexport function clampNum(num: number, min: number, max: number): number {\r\n  return Math.min(Math.max(num, min), max);\r\n}\r\n\r\n// Calculate the percentage of a number\r\nexport function percentageNum(num: number, total: number): number {\r\n  return (num / total) * 100;\r\n}\r\n\r\n// Calculate the absolute value of a number\r\nexport function absoluteNum(num: number): number {\r\n  return Math.abs(num);\r\n}\r\n"],"mappings":"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","names":["formatDateFns"]}